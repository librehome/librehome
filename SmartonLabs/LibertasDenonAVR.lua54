--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
local ENUM_SI = {
    "UNKNOWN",
    "PHONO",
    "CD",
    "TUNER",
    "DVD",
    "BD",
    "TV",
    "SAT/CBL",
    "MPLAY",
    "GAME",
    "HDRADIO",
    "NET",
    "PANDORA",
    "SIRIUSXM",
    "IRADIO",
    "SERVER",
    "FAVORITES",
    "AUX1",
    "AUX2",
    "AUX3",
    "AUX4",
    "AUX5",
    "AUX6",
    "AUX7",
    "BT",
    "USB/IPOD",
    "USB",
    "IPD",
    "IRP",
    "FVP"
}
local ENUM_ON_AUTO_OFF = {"ON", "AUTO", "OFF"}
local ENUM_MS = {
    "UNKNOWN",
    "MOVIE",
    "MUSIC",
    "GAME",
    "DIRECT",
    "PURE DIRECT",
    "STEREO",
    "AUTO",
    "DOLBY PRO LOGIC",
    "DOLBY PL2 C",
    "DOLBY PL2 M",
    "DOLBY PL2 G",
    "DOLBY PL2X C",
    "DOLBY PL2X M",
    "DOLBY PL2X G",
    "DOLBY PL2Z H",
    "DOLBY SURROUND",
    "DOLBY ATMOS",
    "DOLBY DIGITAL",
    "DOLBY D EX",
    "DOLBY D+PL2X C",
    "DOLBY D+PL2X M",
    "DOLBY D+PL2Z H",
    "DOLBY D+DS",
    "DOLBY D+NEO:X C",
    "DOLBY D+NEO:X M",
    "DOLBY D+NEO:X G",
    "DOLBY D+NEURAL:X",
    "DTS SURROUND",
    "DTS ES DSCRT6.1",
    "DTS ES MTRX6.1",
    "DTS+PL2X C",
    "DTS+PL2X M",
    "DTS+PL2Z H",
    "DTS+DS",
    "DTS96/24",
    "DTS96 ES MTRX",
    "DTS+NEO:6",
    "DTS+NEO:X C",
    "DTS+NEO:X M",
    "DTS+NEO:X G",
    "DTS+NEURAL:X",
    "DTS ES MTRX+NEURAL:X",
    "DTS ES DSCRT+NEURAL:X",
    "MULTI CH IN",
    "M CH IN+DOLBY EX",
    "M CH IN+PL2X C",
    "M CH IN+PL2X M",
    "M CH IN+PL2Z H",
    "M CH IN+DS",
    "MULTI CH IN 7.1",
    "M CH IN+NEO:X C",
    "M CH IN+NEO:X M",
    "M CH IN+NEO:X G",
    "M CH IN+NEURAL:X",
    "DOLBY D+",
    "DOLBY D+ +EX",
    "DOLBY D+ +PL2X C",
    "DOLBY D+ +PL2X M",
    "DOLBY D+ +PL2Z H",
    "DOLBY D+ +DS",
    "DOLBY D+ +NEO:X C",
    "DOLBY D+ +NEO:X M",
    "DOLBY D+ +NEO:X G",
    "DOLBY D+ +NEURAL:X",
    "DOLBY HD",
    "DOLBY HD+EX",
    "DOLBY HD+PL2X C",
    "DOLBY HD+PL2X M",
    "DOLBY HD+PL2Z H",
    "DOLBY HD+DS",
    "DOLBY HD+NEO:X C",
    "DOLBY HD+NEO:X M",
    "DOLBY HD+NEO:X G",
    "DOLBY HD+NEURAL:X",
    "DTS HD",
    "DTS HD MSTR",
    "DTS HD+PL2X C",
    "DTS HD+PL2X M",
    "DTS HD+PL2Z H",
    "DTS HD+DS",
    "DTS HD+NEO:6",
    "DTS HD+NEO:X C",
    "DTS HD+NEO:X M",
    "DTS HD+NEO:X G",
    "DTS HD+NEURAL:X",
    "DTS:X",
    "DTS:X MSTR",
    "DTS EXPRESS",
    "DTS ES 8CH DSCRT",
    "MPEG2 AAC",
    "AAC+DOLBY EX",
    "AAC+PL2X C",
    "AAC+PL2X M",
    "AAC+PL2Z H",
    "AAC+DS",
    "AAC+NEO:X C",
    "AAC+NEO:X M",
    "AAC+NEO:X G",
    "AAC+NEURAL:X",
    "PL DSX",
    "PL2 C DSX",
    "PL2 M DSX",
    "PL2 G DSX",
    "PL2X C DSX",
    "PL2X M DSX",
    "PL2X G DSX",
    "AUDYSSEY DSX",
    "DTS NEO:6 C",
    "DTS NEO:6 M",
    "DTS NEO:X C",
    "DTS NEO:X M",
    "DTS NEO:X G",
    "NEURAL:X",
    "NEO:6 C DSX",
    "NEO:6 M DSX",
    "AURO3D",
    "AURO2DSURR",
    "MCH STEREO",
    "WIDE SCREEN",
    "SUPER STADIUM",
    "ROCK ARENA",
    "JAZZ CLUB",
    "CLASSIC CONCERT",
    "MONO MOVIE",
    "MATRIX",
    "VIDEO GAME",
    "VIRTUAL",
    "STEREO",
    "ALL ZONE STEREO",
    "7.1IN"
}
local AckAction = AckAction or ({})
AckAction.NA = 0
AckAction[AckAction.NA] = "NA"
AckAction.UPDATE = 1
AckAction[AckAction.UPDATE] = "UPDATE"
AckAction.FORCE = 2
AckAction[AckAction.FORCE] = "FORCE"
local TIMEOUT_ACK = 2000
local TIMEOUT_HB = 60000
local TIMEOUT_RECONN_WAIT = 10000
local function getEnumIndex(value, e, start, def)
    start = start or 0
    do
        local i = start
        while i < #e do
            if e[i + 1] == value then
                return i
            end
            i = i + 1
        end
    end
    return def
end
local function getBoolean(value)
    if value == "ON" then
        return true
    elseif value == "OFF" then
        return false
    end
end
local function virtualDeviceSendReport(device, value)
    if Libertas_DeviceSupportsCluster(device, 8) then
        local attributes = {[0] = value}
        Libertas_VirtualDeviceUpdate(device, 8, attributes, 7)
    elseif Libertas_DeviceSupportsCluster(device, 6) then
        local attributes = {[0] = value}
        Libertas_VirtualDeviceUpdate(device, 6, attributes, 7)
    elseif Libertas_DeviceSupportsCluster(device, 18) then
        local attrs = {[85] = value}
        Libertas_VirtualDeviceUpdate(device, 18, attrs, 7)
    end
end
local function DenonAVR(avr, mainZone, extraZones)
    local onError, enqueuePendingMessagesForce, rescheduleHeartbeat, trySendMessage, unsupportedCmds, suspectedUnsupportedCmd, socket, deviceValues, validDevices, pendingMessages, pendingAck, ready, validSession, reconnectTimer, commandAckTimer, heartBeatTimer
    function onError()
        local reconnectTimeout = TIMEOUT_RECONN_WAIT
        if validSession and pendingAck then
            local failureCount = suspectedUnsupportedCmd:get(pendingAck.c)
            if failureCount == nil then
                failureCount = 0
            end
            if failureCount >= 3 then
                suspectedUnsupportedCmd:delete(pendingAck.c)
                unsupportedCmds:add(pendingAck.c)
            else
                suspectedUnsupportedCmd:set(pendingAck.c, failureCount + 1)
            end
            reconnectTimeout = 100
        end
        for ____, device in __TS__Iterator(validDevices) do
            Libertas_VirtualDeviceStatusDeviceDown(device)
        end
        deviceValues:clear()
        Libertas_NetClose(socket)
        Libertas_TimerCancel(commandAckTimer)
        Libertas_TimerCancel(heartBeatTimer)
        ready = false
        Libertas_TimerUpdate(reconnectTimer, reconnectTimeout)
    end
    function enqueuePendingMessagesForce(device, command, prefixLen, ack, source)
        if ready then
            if not unsupportedCmds:has(command) then
                local msg = {
                    d = device,
                    c = command,
                    n = prefixLen,
                    a = ack,
                    s = source,
                    t = os.msticks()
                }
                pendingMessages:pushright(msg)
                trySendMessage()
            end
        end
    end
    function rescheduleHeartbeat()
        if ready then
            if not pendingAck then
                Libertas_TimerUpdate(heartBeatTimer, TIMEOUT_HB)
            else
                Libertas_TimerCancel(heartBeatTimer)
            end
        end
    end
    function trySendMessage()
        if ready and pendingAck == nil then
            pendingAck = pendingMessages:popleft()
            if pendingAck then
                Libertas_NetWrite(socket, pendingAck.c)
                Libertas_TimerUpdate(commandAckTimer, TIMEOUT_ACK)
            end
            rescheduleHeartbeat()
        end
    end
    local curIncoming = lbuffer()
    unsupportedCmds = __TS__New(Set)
    suspectedUnsupportedCmd = __TS__New(Map)
    socket = Libertas_NetNewTcp()
    deviceValues = __TS__New(Map)
    validDevices = __TS__New(Set)
    pendingMessages = list.new()
    ready = false
    validSession = false
    reconnectTimer = Libertas_TimerNew(
        0,
        function()
            Libertas_NetConnectDevice(socket, avr, 23)
        end
    )
    commandAckTimer = Libertas_TimerNew(
        0,
        function()
            onError()
        end
    )
    heartBeatTimer = Libertas_TimerNew(
        0,
        function()
            enqueuePendingMessagesForce(
                nil,
                "ZM?\r",
                2,
                AckAction.NA,
                0
            )
        end
    )
    local function enqueuePendingMessages(device, command, prefixLen, ack, source)
        if device ~= nil then
            enqueuePendingMessagesForce(
                device,
                command,
                prefixLen,
                ack,
                source
            )
        end
    end
    local function cbUpdate(device, cmd, value)
        local ____temp_0
        if device ~= nil then
            ____temp_0 = deviceValues:get(device)
        else
            ____temp_0 = nil
        end
        local oldValue = ____temp_0
        local modified = oldValue == nil or oldValue ~= value
        local shouldNotify = false
        local source = 1
        local isAck = pendingAck ~= nil and pendingAck.n == #cmd and __TS__StringStartsWith(pendingAck.c, cmd)
        if isAck then
            suspectedUnsupportedCmd:delete(pendingAck.c)
            local ackAction = pendingAck.a
            if ackAction == AckAction.UPDATE then
                shouldNotify = modified
            elseif ackAction == AckAction.FORCE then
                shouldNotify = true
            end
            source = pendingAck.s
            pendingAck = nil
            Libertas_TimerCancel(commandAckTimer)
            validSession = true
            trySendMessage()
        else
            shouldNotify = modified
        end
        if device ~= nil then
            deviceValues:set(device, value)
            if shouldNotify then
                if oldValue == nil then
                    virtualDeviceSendReport(device, value)
                else
                    if Libertas_DeviceSupportsCluster(device, 8) then
                        local args = {value, 0}
                        Libertas_VirtualDeviceCommand(
                            device,
                            8,
                            4,
                            source,
                            args
                        )
                    elseif Libertas_DeviceSupportsCluster(device, 6) then
                        local args = {}
                        local cmd = value and 1 or 0
                        Libertas_VirtualDeviceCommand(
                            device,
                            6,
                            cmd,
                            source,
                            args
                        )
                    elseif Libertas_DeviceSupportsCluster(device, 18) then
                        local attrs = {[85] = value}
                        Libertas_VirtualDeviceUpdate(device, 18, attrs, source)
                    end
                end
            end
        end
    end
    local function onMV(cmd, params)
        local v = tonumber(params)
        if v ~= nil then
            if #params == 2 then
                v = v * 10
            end
            v = v / 5
            cbUpdate(mainZone.volume, cmd, v)
        end
    end
    local function onMU(cmd, params)
        local v = getBoolean(params)
        if v ~= nil then
            cbUpdate(mainZone.mute, cmd, v)
        end
    end
    local function onSI(cmd, params)
        local v = getEnumIndex(params, ENUM_SI, 1, 0)
        if v ~= nil then
            cbUpdate(mainZone.input, cmd, v)
        end
    end
    local function onMS(cmd, params)
        local v = getEnumIndex(params, ENUM_MS, 1, 0)
        if v ~= nil then
            cbUpdate(mainZone.mode, cmd, v)
        end
    end
    local function onZM(cmd, params)
        local v = getBoolean(params)
        if v ~= nil then
            cbUpdate(mainZone.onOff, cmd, v)
        end
    end
    local function onECO(cmd, params)
        local v = getEnumIndex(params, ENUM_ON_AUTO_OFF)
        if v ~= nil then
            cbUpdate(mainZone.eco, cmd, v)
        end
    end
    ---
    -- @zone : 0 = Z2, 1 - Z3
    local function onExtraZone(zone, cmd, params)
        if #extraZones < zone + 1 then
            return
        end
        local d
        local v = tonumber(params)
        if v ~= nil then
            if #params == 2 then
                v = v * 10
            end
            v = v / 5
            d = extraZones[zone + 1].volume
        elseif params == "ON" then
            d = extraZones[zone + 1].onOff
            v = true
        elseif params == "OFF" then
            d = extraZones[zone + 1].onOff
            v = false
        elseif params == "MUON" then
            d = extraZones[zone + 1].mute
            cmd = cmd .. "MU"
            v = true
        elseif params == "MUOFF" then
            d = extraZones[zone + 1].mute
            cmd = cmd .. "MU"
            v = false
        else
            v = getEnumIndex(params, ENUM_SI, 1)
            if v ~= nil then
                d = extraZones[zone + 1].input
            else
                v = getEnumIndex(params, ENUM_MS, 1)
                if v ~= nil then
                    d = extraZones[zone + 1].mode
                end
            end
        end
        if d ~= nil and v ~= nil then
            cbUpdate(d, cmd, v)
        end
    end
    local HANDLERS = {}
    HANDLERS.ZM = onZM
    if mainZone.eco ~= nil then
        HANDLERS.ECO = onECO
    end
    if mainZone.input ~= nil then
        HANDLERS.SI = onSI
    end
    if mainZone.mute ~= nil then
        HANDLERS.MU = onMU
    end
    if mainZone.volume ~= nil then
        HANDLERS.MV = onMV
    end
    if mainZone.mode ~= nil then
        HANDLERS.MS = onMS
    end
    local function onIncoming(c)
        if c == 13 then
            local cmd
            local params
            if curIncoming:len() > 3 then
                if curIncoming:tostring(1, 3) == "ECO" then
                    cmd = "ECO"
                    params = curIncoming:tostring(4)
                else
                    cmd = curIncoming:tostring(1, 2)
                    params = curIncoming:tostring(3)
                end
                if cmd == "Z2" then
                    onExtraZone(0, cmd, params)
                elseif cmd == "Z3" then
                    onExtraZone(1, cmd, params)
                else
                    local f = HANDLERS[cmd]
                    if f then
                        f(cmd, params)
                    end
                end
            end
            curIncoming:setlen(0)
            rescheduleHeartbeat()
        else
            local p = curIncoming:len()
            curIncoming:setlen(p + 1)
            curIncoming[__TS__index_adj(p)] = c
        end
    end
    local function getCmdParameter(event, index)
        if event.v ~= nil then
            local l = event.v
            return l[index + 1]
        end
    end
    local function genCmdVolume(cmd, v)
        if v >= 0 and v <= 98 then
            local whole = math.floor(v)
            local fraction = v - whole
            if fraction ~= 0 then
                return string.format("%s%02d5\r", cmd, whole)
            else
                return string.format("%s%02d\r", cmd, whole)
            end
        end
    end
    local function onControlVolume(event, cmd)
        if event.c ~= 8 then
            return
        end
        if event.t ~= 0 then
            return
        end
        local outCmd
        if cmd ~= nil and event.d ~= nil then
            if event.d == 2 or event.d == 6 then
                local stepMode = getCmdParameter(event, 0)
                local stepBy = getCmdParameter(event, 1)
                local curValue = deviceValues:get(event.id)
                if curValue == nil then
                    if stepMode == 0 then
                        outCmd = string.format("%sUP\r", cmd)
                    elseif stepMode == 1 then
                        outCmd = string.format("%sDOWN\r", cmd)
                    end
                else
                    local newValue = curValue
                    if stepMode == 0 then
                        newValue = newValue + stepBy
                    elseif stepMode == 1 then
                        newValue = newValue - stepBy
                    end
                    if newValue >= 0 and newValue < 98 * 2 and newValue ~= curValue then
                        outCmd = genCmdVolume(cmd, newValue / 2)
                    end
                end
            elseif event.d == 0 or event.d == 4 then
                local level = getCmdParameter(event, 0)
                outCmd = genCmdVolume(cmd, level / 2)
            end
            return outCmd
        end
    end
    local function onControlOnOff(event, cmd)
        if event.c ~= 6 then
            return
        end
        if event.t ~= 0 then
            return
        end
        local outCmd
        if event.d == 1 then
            outCmd = string.format("%sON\r", cmd)
        elseif event.d == 0 then
            outCmd = string.format("%sOFF\r", cmd)
        elseif event.d == 2 then
            local curValue = deviceValues:get(event.id)
            if curValue == nil then
                curValue = false
            end
            local newValue = not curValue
            outCmd = string.format("%s%s\r", cmd, newValue and "ON" or "OFF")
        end
        return outCmd
    end
    local function onControlEnum(event, cmd, values)
        if event.c ~= 18 then
            return
        end
        if event.t ~= 1 then
            return
        end
        if event.s == 6 or event.s == 7 then
            return
        end
        local attrs = event.v
        local v = attrs[18 << 16 | 85]
        if v ~= nil then
            local val = values[v + 1]
            if val ~= nil then
                return string.format("%s%s\r", cmd, val)
            end
        end
    end
    local function initCtrlMap(d, cmd, f, depends, values)
        if d ~= nil then
            validDevices:add(d)
            Libertas_SetOnVirtualDevice(
                d,
                function(_, event)
                    if d ~= depends then
                        local dependentPower = deviceValues:get(depends)
                        if dependentPower == nil or not dependentPower then
                            local value = deviceValues:get(d)
                            if value ~= nil then
                                virtualDeviceSendReport(d, value)
                            end
                            return
                        end
                    end
                    local ctrlCmd = f(event, cmd, values)
                    if ctrlCmd then
                        enqueuePendingMessages(
                            d,
                            ctrlCmd,
                            #cmd,
                            AckAction.FORCE,
                            event.s
                        )
                    end
                end
            )
        end
    end
    local function initSubZone(zone, cmd)
        initCtrlMap(
            zone.input,
            cmd,
            onControlEnum,
            zone.onOff,
            ENUM_SI
        )
        initCtrlMap(
            zone.mode,
            cmd,
            onControlEnum,
            zone.onOff,
            ENUM_MS
        )
        initCtrlMap(zone.mute, cmd .. "MU", onControlOnOff, zone.onOff)
        initCtrlMap(zone.onOff, cmd, onControlOnOff, zone.onOff)
        initCtrlMap(zone.volume, cmd, onControlVolume, zone.onOff)
    end
    initCtrlMap(
        mainZone.eco,
        "ECO",
        onControlEnum,
        mainZone.onOff,
        ENUM_ON_AUTO_OFF
    )
    initCtrlMap(
        mainZone.input,
        "SI",
        onControlEnum,
        mainZone.onOff,
        ENUM_SI
    )
    initCtrlMap(mainZone.mute, "MU", onControlOnOff, mainZone.onOff)
    initCtrlMap(mainZone.onOff, "ZM", onControlOnOff, mainZone.onOff)
    initCtrlMap(mainZone.volume, "MV", onControlVolume, mainZone.onOff)
    initCtrlMap(
        mainZone.input,
        "MS",
        onControlEnum,
        mainZone.onOff,
        ENUM_MS
    )
    if #extraZones > 0 then
        initSubZone(extraZones[1], "Z2")
        if #extraZones > 1 then
            initSubZone(extraZones[2], "Z3")
        end
    end
    local function initVolumeAttributes(device)
        if device ~= nil then
            Libertas_VirtualDeviceUpdate(device, 64514, {
                [1] = 0,
                [0] = 196,
                [2] = true,
                [3] = 1,
                [4] = 3,
                [5] = 5
            }, 7)
        end
    end
    local function initMultiStateAttributes(device, nStates, minState)
        if device ~= nil then
            Libertas_VirtualDeviceUpdate(device, 18, {[74] = nStates}, 7)
            if minState ~= nil and minState ~= 0 then
                Libertas_VirtualDeviceUpdate(device, 64624, {[4] = minState}, 7)
            end
        end
    end
    initVolumeAttributes(mainZone.volume)
    initMultiStateAttributes(mainZone.input, #ENUM_SI, 1)
    initMultiStateAttributes(mainZone.eco, #ENUM_ON_AUTO_OFF)
    initMultiStateAttributes(mainZone.mode, #ENUM_MS, 1)
    if #extraZones > 0 then
        initVolumeAttributes(extraZones[1].volume)
        initMultiStateAttributes(extraZones[1].input, #ENUM_SI, 1)
        initMultiStateAttributes(extraZones[1].mode, #ENUM_MS, 1)
        if #extraZones > 1 then
            initVolumeAttributes(extraZones[2].volume)
            initMultiStateAttributes(extraZones[2].input, #ENUM_SI, 1)
            initMultiStateAttributes(extraZones[2].mode, #ENUM_MS, 1)
        end
    end
    Libertas_SetOnNetReady(
        socket,
        function(tag)
            curIncoming:setlen(0)
            pendingMessages = list.new()
            pendingAck = nil
            ready = true
            validSession = false
            enqueuePendingMessagesForce(
                mainZone.onOff,
                "ZM?\r",
                2,
                AckAction.FORCE,
                7
            )
            enqueuePendingMessages(
                mainZone.volume,
                "MV?\r",
                2,
                AckAction.FORCE,
                7
            )
            enqueuePendingMessages(
                mainZone.mute,
                "MU?\r",
                2,
                AckAction.FORCE,
                7
            )
            enqueuePendingMessages(
                mainZone.input,
                "SI?\r",
                2,
                AckAction.FORCE,
                7
            )
            enqueuePendingMessages(
                mainZone.eco,
                "ECO?\r",
                3,
                AckAction.FORCE,
                7
            )
            enqueuePendingMessages(
                mainZone.mode,
                "MS?\r",
                2,
                AckAction.FORCE,
                7
            )
            if #extraZones > 0 then
                enqueuePendingMessagesForce(
                    nil,
                    "Z2?\r",
                    2,
                    AckAction.FORCE,
                    7
                )
                if #extraZones > 1 then
                    enqueuePendingMessagesForce(
                        nil,
                        "Z3?\r",
                        2,
                        AckAction.FORCE,
                        7
                    )
                end
            end
        end
    )
    Libertas_SetOnNetDrain(
        socket,
        function()
            trySendMessage()
        end
    )
    Libertas_SetOnNetError(
        socket,
        function(tag, fd, errorType, errorCode, errorText)
            onError()
        end
    )
    Libertas_SetOnNetData(
        socket,
        function(tag, fd, data)
            do
                local i = 0
                while i < #data do
                    onIncoming(__TS__StringCharCodeAt(data, i))
                    i = i + 1
                end
            end
        end
    )
    Libertas_NetSetConnectTimeout(socket, 10)
    Libertas_NetConnectDevice(socket, avr, 23)
    Libertas_WaitReactive()
end
____exports.DenonAVR = DenonAVR
return ____exports
